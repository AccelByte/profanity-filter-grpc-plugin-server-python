# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: app/proto/profanityFilter.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='app/proto/profanityFilter.proto',
  package='accelbyte.profanityfilter.registered.v1',
  syntax='proto3',
  serialized_options=b'\n+net.accelbyte.profanityfilter.registered.v1P\001Z+accelbyte.net/profanityfilter/registered_v1\252\002\'AccelByte.ProfanityFilter.Registered.V1',
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x1f\x61pp/proto/profanityFilter.proto\x12\'accelbyte.profanityfilter.registered.v1\"A\n ExtendProfanityValidationRequest\x12\r\n\x05value\x18\x01 \x01(\t\x12\x0e\n\x06userId\x18\x02 \x01(\t\"G\n!ExtendProfanityValidationResponse\x12\x11\n\tisProfane\x18\x01 \x01(\x08\x12\x0f\n\x07message\x18\x02 \x01(\t2\xbc\x01\n\x16ProfanityFilterService\x12\xa1\x01\n\x08Validate\x12I.accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationRequest\x1aJ.accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationResponseB\x86\x01\n+net.accelbyte.profanityfilter.registered.v1P\x01Z+accelbyte.net/profanityfilter/registered_v1\xaa\x02\'AccelByte.ProfanityFilter.Registered.V1b\x06proto3'
)




_EXTENDPROFANITYVALIDATIONREQUEST = _descriptor.Descriptor(
  name='ExtendProfanityValidationRequest',
  full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationRequest.value', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='userId', full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationRequest.userId', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=76,
  serialized_end=141,
)


_EXTENDPROFANITYVALIDATIONRESPONSE = _descriptor.Descriptor(
  name='ExtendProfanityValidationResponse',
  full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='isProfane', full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationResponse.isProfane', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='message', full_name='accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationResponse.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=143,
  serialized_end=214,
)

DESCRIPTOR.message_types_by_name['ExtendProfanityValidationRequest'] = _EXTENDPROFANITYVALIDATIONREQUEST
DESCRIPTOR.message_types_by_name['ExtendProfanityValidationResponse'] = _EXTENDPROFANITYVALIDATIONRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ExtendProfanityValidationRequest = _reflection.GeneratedProtocolMessageType('ExtendProfanityValidationRequest', (_message.Message,), {
  'DESCRIPTOR' : _EXTENDPROFANITYVALIDATIONREQUEST,
  '__module__' : 'app.proto.profanityFilter_pb2'
  # @@protoc_insertion_point(class_scope:accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationRequest)
  })
_sym_db.RegisterMessage(ExtendProfanityValidationRequest)

ExtendProfanityValidationResponse = _reflection.GeneratedProtocolMessageType('ExtendProfanityValidationResponse', (_message.Message,), {
  'DESCRIPTOR' : _EXTENDPROFANITYVALIDATIONRESPONSE,
  '__module__' : 'app.proto.profanityFilter_pb2'
  # @@protoc_insertion_point(class_scope:accelbyte.profanityfilter.registered.v1.ExtendProfanityValidationResponse)
  })
_sym_db.RegisterMessage(ExtendProfanityValidationResponse)


DESCRIPTOR._options = None

_PROFANITYFILTERSERVICE = _descriptor.ServiceDescriptor(
  name='ProfanityFilterService',
  full_name='accelbyte.profanityfilter.registered.v1.ProfanityFilterService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=217,
  serialized_end=405,
  methods=[
  _descriptor.MethodDescriptor(
    name='Validate',
    full_name='accelbyte.profanityfilter.registered.v1.ProfanityFilterService.Validate',
    index=0,
    containing_service=None,
    input_type=_EXTENDPROFANITYVALIDATIONREQUEST,
    output_type=_EXTENDPROFANITYVALIDATIONRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_PROFANITYFILTERSERVICE)

DESCRIPTOR.services_by_name['ProfanityFilterService'] = _PROFANITYFILTERSERVICE

# @@protoc_insertion_point(module_scope)
